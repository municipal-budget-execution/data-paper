# -*- coding: utf-8 -*-
"""Validation Siconfi

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lGPnLUQZSHirawEq2bgLx2NByZK2l4kM
"""

from google.colab import drive
drive.mount('/content/gdrive')

!pip install basedosdados==1.6.10b1

import pandas as pd
pd.set_option('display.max_columns', None)
pd.options.display.float_format = '{:.2f}'.format
import numpy as np
import os
import glob
from zipfile import ZipFile
from datetime import datetime
import basedosdados as bd

"""# Query"""

query = '''
WITH empenho AS (
  SELECT
    ano,
    id_municipio,
    SUM(valor_final) AS total_empenho
  FROM basedosdados-dev.mundo_bm_financas_publicas.empenho
  WHERE ano >= 2003 AND sigla_uf IN ('MG', 'PB', 'PE', 'PR', 'RS', 'SP')
  GROUP BY 1,2
),
  siconfi AS (
  SELECT 
  ano, 
  sigla_uf, 
  id_municipio,
  SUM(valor) AS total_siconfi 
  FROM `basedosdados-dev.br_me_siconfi.municipio_despesas_orcamentarias` 
  WHERE sigla_uf IN ('MG', 'PB', 'PE', 'PR', 'RS', 'SP') AND ano >= 2003 AND estagio_bd = 'Despesas Empenhadas' AND conta_bd = 'Despesas Orçamentárias'
  GROUP BY 1,2,3
  ORDER BY 1
)

SELECT 
  e.ano,
  sigla_uf,
  e.id_municipio,
  total_empenho,
  total_siconfi,
  ROUND(total_empenho - total_siconfi,2) AS variacao_institucional 
FROM empenho e
LEFT JOIN siconfi s ON e.ano=s.ano AND e.id_municipio=s.id_municipio
WHERE total_siconfi IS NOT NULL
'''

empenho_siconfi = bd.read_sql(query, billing_project_id='basedosdados-dev')
empenho_siconfi['proporcao'] = 100*empenho_siconfi['variacao_institucional']/empenho_siconfi['total_empenho']

"""# Municípios faltantes"""

diretorio = bd.read_sql('SELECT id_municipio, nome FROM basedosdados.br_bd_diretorios_brasil.municipio WHERE sigla_uf IN ("MG", "PB", "PE", "PR", "RS", "SP")', 
                        billing_project_id='basedosdados-dev')

municipios = empenho_siconfi[['ano', 'sigla_uf', 'id_municipio']]

municipios = pd.merge(diretorio, municipios, how='left', on='id_municipio', indicator=True)

municipios.query('_merge == "left_only"')

"""# Análise

## Empenho | Município - Ano
"""

empenho_siconfi.groupby(['ano', 'sigla_uf']).size().unstack()

empenho_siconfi = empenho_siconfi.query('proporcao != -inf')
empenho_siconfi2 = empenho_siconfi.drop(empenho_siconfi[(empenho_siconfi['sigla_uf'] == 'RS') & (empenho_siconfi['ano'] < 2010)].index)

empenho_siconfi2.describe()

empenho_siconfi2.head()

empenho_siconfi.shape

empenho_siconfi2.shape

empenho_siconfi2.query('proporcao > -5 & proporcao < 25').shape

import matplotlib.pyplot as plt

plt.hist(empenho_siconfi2.query('proporcao > -5 & proporcao < 25')['proporcao'], bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.xlabel('Proportion in relation with commitment', fontsize=12)
plt.ylabel('Frequency', fontsize=12)

ufs = empenho_siconfi['sigla_uf'].drop_duplicates().sort_values().to_list()

plt.figure(figsize = ((15, 9)))

plt.subplot(3, 2, 1)
plt.title("MG", fontsize = 14)
plt.hist(empenho_siconfi2.query('sigla_uf == "MG" & proporcao > -2 & proporcao < 2')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.ylabel('Frequency')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 2)
plt.title("PB", fontsize = 14)
plt.hist(empenho_siconfi2.query('sigla_uf == "PB" & proporcao > -2 & proporcao < 5')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 3)
plt.title("PE", fontsize = 14)
plt.hist(empenho_siconfi2.query('sigla_uf == "PE" & proporcao > -1.5 & proporcao < 1.5')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.ylabel('Frequency')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 4)
plt.title("PR", fontsize = 14)
plt.hist(empenho_siconfi2.query('sigla_uf == "PR" & proporcao > -5 & proporcao < 30')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 5)
plt.title("RS", fontsize = 14)
plt.hist(empenho_siconfi2.query('sigla_uf == "RS" & proporcao > -5 & proporcao < 20')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.xlabel('Compatibility proportion - Commitments (%)')
plt.ylabel('Frequency')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 6)
plt.title("SP", fontsize = 14)
plt.hist(empenho_siconfi2.query('sigla_uf == "SP" & proporcao > -5 & proporcao < 25')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.xlabel('Compatibility proportion - Commitments (%)')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=0.2, hspace=0.35)
plt.savefig('/content/gdrive/MyDrive/ComprasPublicas_Brasil/output/graficos/validation_siconfi_commitment.pdf')
plt.show()

empenho_siconfi2 = empenho_siconfi2.query('proporcao > -101 & proporcao < 100')

from IPython.core.display import publish_display_data
# Generate data for the box plots
data1 = empenho_siconfi2.query('sigla_uf == "MG"')['proporcao'].to_numpy()
data2 = empenho_siconfi2.query('sigla_uf == "PB"')['proporcao'].to_numpy()
data3 = empenho_siconfi2.query('sigla_uf == "PE"')['proporcao'].to_numpy()
data4 = empenho_siconfi2.query('sigla_uf == "PR"')['proporcao'].to_numpy()
data5 = empenho_siconfi2.query('sigla_uf == "RS"')['proporcao'].to_numpy()
data6 = empenho_siconfi2.query('sigla_uf == "SP"')['proporcao'].to_numpy()

mask = ~np.isnan(data1)
mg = data1[mask]

mask_2 = ~np.isnan(data2)
pb = data2[mask_2]

mask_3 = ~np.isnan(data3)
pe = data3[mask_3]

mask_4 = ~np.isnan(data4)
pr = data4[mask_4]

mask_5 = ~np.isnan(data5)
rs = data5[mask_5]

mask_6 = ~np.isnan(data6)
sp = data6[mask_6]

# Create a figure and axis object
fig, ax = plt.subplots(figsize=(8,8))

# Plot the three box plots 
ax.boxplot([mg, pb, pe, pr, rs, sp])

# Set the tick labels
ax.set_xticklabels(['MG', 'PB', 'PE', 'PR', 'RS', 'SP'])

# Set the title and labels
ax.set_title('Compatibility Proportion - Commitments')
ax.set_xlabel('Datasets')
ax.set_ylabel('Frequency')

plt.savefig('/content/gdrive/MyDrive/ComprasPublicas_Brasil/output/graficos/validation_siconfi_commitment_boxplot.pdf')

# Show the plot
plt.show()

"""## Empenho | Município - Ano - Função"""

funcao_siconfi=pd.read_csv('/content/gdrive/MyDrive/bq-results-20230220-092823-1676885413465/bq-results-20230220-092823-1676885413465.csv')
#cria variável do percentual dde diferença por função
funcao_siconfi['variacao_institucional'] = funcao_siconfi['total_empenho'] - funcao_siconfi['total_siconfi']
funcao_siconfi['proporcao'] = 100*(funcao_siconfi['total_empenho'] - funcao_siconfi['total_siconfi'])/funcao_siconfi['total_empenho']

funcao_siconfi = funcao_siconfi.query('proporcao != -inf')
funcao_siconfi2 = funcao_siconfi.drop(funcao_siconfi[(funcao_siconfi['sigla_uf'] == 'RS') & (funcao_siconfi['ano'] < 2010)].index)

plt.hist(funcao_siconfi2.query('proporcao > -0.3 & proporcao < 1')['proporcao'], bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.xlabel('Proportion in relation with commitment per function', fontsize=12)
plt.ylabel('Frequency', fontsize=12)

ufs = empenho_siconfi['sigla_uf'].drop_duplicates().sort_values().to_list()

plt.figure(figsize = ((15, 9)))

plt.subplot(3, 2, 1)
plt.title("MG", fontsize = 14)
plt.hist(funcao_siconfi2.query('sigla_uf == "MG" & proporcao > -2 & proporcao < 2')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.ylabel('Frequency')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 2)
plt.title("PB", fontsize = 14)
plt.hist(funcao_siconfi2.query('sigla_uf == "PB" & proporcao > 0 & proporcao < 2')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 3)
plt.title("PE", fontsize = 14)
plt.hist(funcao_siconfi2.query('sigla_uf == "PE" & proporcao > -0.1 & proporcao < 0.5')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.ylabel('Frequency')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 4)
plt.title("PR", fontsize = 14)
plt.hist(funcao_siconfi2.query('sigla_uf == "PR" & proporcao > -5 & proporcao < 30')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 5)
plt.title("RS", fontsize = 14)
plt.hist(funcao_siconfi2.query('sigla_uf == "RS" & proporcao > -2 & proporcao < 15')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.xlabel('Compatibility proportion - Commitments (%)')
plt.ylabel('Frequency')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 6)
plt.title("SP", fontsize = 14)
plt.hist(funcao_siconfi2.query('sigla_uf == "SP" & proporcao > -1 & proporcao < 25')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.xlabel('Compatibility proportion - Commitments (%)')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=0.2, hspace=0.35)
plt.savefig('/content/gdrive/MyDrive/ComprasPublicas_Brasil/output/graficos/validation_siconfi_commitment_function.pdf')
plt.show()

funcao_siconfi2.query('sigla_uf == "PE"').shape

funcao_siconfi2.query('sigla_uf == "PE"')['proporcao'].describe()

"""## Pagamento | Município - Ano"""

pgto_tce = pd.read_csv('/content/gdrive/MyDrive/bq-results-20230321-094543-1679392642891/bq-results-20230321-094543-1679392642891.csv', dtype=str)
pgto_siconfi = pd.read_csv('/content/gdrive/MyDrive/bq-results-20230321-100000-1679392824154/bq-results-20230321-100000-1679392824154.csv', dtype=str)

pgto = pd.merge(pgto_tce, pgto_siconfi, how='right', on=['ano', 'id_municipio'])
pgto = pgto[['ano', 'sigla_uf', 'id_municipio', 'total_pagamento', 'total_siconfi']]
pgto['proporcao'] = 100*(pgto['total_pagamento'].astype(float) - pgto['total_siconfi'].astype(float))/pgto['total_pagamento'].astype(float)

plt.hist(pgto.query('proporcao > -5 & proporcao < 25')['proporcao'], bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.xlabel('Proportion in relation with payments', fontsize=12)
plt.ylabel('Frequency', fontsize=12)

#ufs = empenho_siconfi['sigla_uf'].drop_duplicates().sort_values().to_list()

plt.figure(figsize = ((15, 9)))

plt.subplot(3, 2, 1)
plt.title("MG", fontsize = 14)
plt.hist(pgto.query('sigla_uf == "MG" & proporcao > -800 & proporcao < 100')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.ylabel('Frequency')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 2)
plt.title("PB", fontsize = 14)
plt.hist(pgto.query('sigla_uf == "PB" & proporcao > 99 & proporcao < 100')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 3)
plt.title("PE", fontsize = 14)
plt.hist(pgto.query('sigla_uf == "PE" & proporcao > 70 & proporcao < 100')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.ylabel('Frequency')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 4)
plt.title("PR", fontsize = 14)
plt.hist(pgto.query('sigla_uf == "PR" & proporcao > -5 & proporcao < 30')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 5)
plt.title("RS", fontsize = 14)
plt.hist(pgto.query('sigla_uf == "RS" & proporcao > -5 & proporcao < 20')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.xlabel('Compatibility proportion - Payments (%)')
plt.ylabel('Frequency')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplot(3, 2, 6)
plt.title("SP", fontsize = 14)
plt.hist(pgto.query('sigla_uf == "SP" & proporcao > -1 & proporcao < 1')['proporcao'], 
         bins=20, facecolor='lightseagreen', edgecolor='teal', linewidth=0.5)
plt.grid(True, ls='--')
plt.xlabel('Compatibility proportion - Payments (%)')
for pos in ['right', 'top', 'bottom', 'left']:
    plt.gca().spines[pos].set_visible(False)

plt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=0.2, hspace=0.35)
plt.savefig('/content/gdrive/MyDrive/ComprasPublicas_Brasil/output/graficos/validation_siconfi_payment.pdf')
plt.show()

pgto2 = pgto.query('proporcao > -100 & proporcao < 100')
from IPython.core.display import publish_display_data
# Generate data for the box plots
data1 = pgto2.query('sigla_uf == "MG"')['proporcao'].to_numpy()
data2 = pgto2.query('sigla_uf == "PB"')['proporcao'].to_numpy()
data3 = pgto2.query('sigla_uf == "PE"')['proporcao'].to_numpy()
data4 = pgto2.query('sigla_uf == "PR"')['proporcao'].to_numpy()
data5 = pgto2.query('sigla_uf == "RS"')['proporcao'].to_numpy()
data6 = pgto2.query('sigla_uf == "SP"')['proporcao'].to_numpy()

mask = ~np.isnan(data1)
mg = data1[mask]

mask_2 = ~np.isnan(data2)
pb = data2[mask_2]

mask_3 = ~np.isnan(data3)
pe = data3[mask_3]

mask_4 = ~np.isnan(data4)
pr = data4[mask_4]

mask_5 = ~np.isnan(data5)
rs = data5[mask_5]

mask_6 = ~np.isnan(data6)
sp = data6[mask_6]

# Create a figure and axis object
fig, ax = plt.subplots(figsize=(8,8))

# Plot the three box plots 
ax.boxplot([mg, pb, pe, pr, rs, sp])

# Set the tick labels
ax.set_xticklabels(['MG', 'PB', 'PE', 'PR', 'RS', 'SP'])

# Set the title and labels
ax.set_title('Compatibility Proportion - Payments')
ax.set_xlabel('Datasets')
ax.set_ylabel('Frequency')

plt.savefig('/content/gdrive/MyDrive/ComprasPublicas_Brasil/output/graficos/validation_siconfi_payment_boxplot.pdf')

# Show the plot
plt.show()